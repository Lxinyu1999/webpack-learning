{
  /* tsconfig.json是ts编译器的配置文件 */
  // include表示哪些ts文件需要被编译，用数组表示所有需要编译的ts文件路径
  "include": ["./src/**/*", "hello.ts", "hello2.ts"], // **表示任意目录（文件夹），*表示任意文件
  // exclude表示不要编译哪些ts文件
  "exclude": ["noNeed.ts"],

  /* 重要！compilerOption：里面包含了多个配置项，用于对编译进行设定 */
  "compilerOptions": {
    // 编译以后的js代码版本，默认是es3（这就是为什么出现var了）
    "target": "ES6",
    // js存在各种模块化解决方案，你需要指明你设置的模块化规范。比如es6（es2015），commonJS（默认）
    "module": "ES6",
    // 指定项目使用的哪些库，例如DOM等。一般不需要设置，除非你的代码没有运行在浏览器上（nodejs)
    "lib": ["dom", "es6"],
    // 编译好的文件输出在哪里，一般取名用dist。outDir会保持原有目录结构输出
    "outDir": "./dist",
    // "outFile": "./dist/app.js" // 用的不多，合并所有输出，但是对模块化es6/commonJs不支持

    "esModuleInterop": true, // 启用对 ES6 模块的兼容

    "allowJs": false, // allowjs：是否对js文件进行编译，默认false不便宜
    "checkJs": false, // 是否检查js代码，默认也是false。
    "removeComments": false, // 是否删除注释，默认false
    "noEmit": false, //不生成编译后的js文件，默认false
    "noEmitOnError": false, // 当有错误时，不生成js文件，默认false（这个感觉有点用）

    "strict": false, // 所有严格检查的总开关
    "alwaysStrict": false // 编译后的js是否开启严格模式，默认false（该选项只针对js，ts已经很严格了）
  }
}
